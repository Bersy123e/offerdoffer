import pandas as pd
import logging
from typing import Dict, List, Optional
import os

from .smart_price_processor import SmartPriceListProcessor
from .bruteforce_processor import BruteforceProcessor

logger = logging.getLogger(__name__)

class CascadeProcessor:
    """
    –ö–ê–°–ö–ê–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–ê–ô–°-–õ–ò–°–¢–û–í
    
    –£—Ä–æ–≤–µ–Ω—å 1: –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (SmartPriceListProcessor)
    –£—Ä–æ–≤–µ–Ω—å 2: –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞–Ω–∞–ª–∏–∑ (BruteforceProcessor) 
    –£—Ä–æ–≤–µ–Ω—å 3: LLM —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ)
    """
    
    def __init__(self, llm=None):
        self.llm = llm
        self.level1_processor = SmartPriceListProcessor(llm=llm)
        self.level2_processor = BruteforceProcessor(llm=llm)
        
    def process_file_cascade(self, file_path: str, file_name: str = "") -> Dict:
        """
        –ö–∞—Å–∫–∞–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–º—è —É—Ä–æ–≤–Ω—è–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        """
        logger.info(f"üéØ –ö–ê–°–ö–ê–î–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: {file_name}")
        
        result = {
            'success': False,
            'final_method': None,
            'products': [],
            'cascade_log': [],
            'all_attempts': {}
        }
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
            df = self._read_file_safely(file_path)
            if df is None:
                result['cascade_log'].append("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
                return result
            
            # –£–†–û–í–ï–ù–¨ 1: –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
            logger.info("üî• –£–†–û–í–ï–ù–¨ 1: –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
            level1_result = self.level1_processor.process_price_list(df, file_name)
            result['all_attempts']['level1'] = level1_result
            
            if level1_result['success'] and len(level1_result['products']) >= 5:
                # –£—Å–ø–µ—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ 1!
                result['success'] = True
                result['final_method'] = 'level1_smart'
                result['products'] = level1_result['products']
                result['cascade_log'].append(f"‚úÖ –£–†–û–í–ï–ù–¨ 1 –£–°–ü–ï–•: {len(level1_result['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                logger.info(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å 1 —É—Å–ø–µ—à–µ–Ω: {len(level1_result['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                return result
            else:
                result['cascade_log'].append(f"‚ö†Ô∏è –£–†–û–í–ï–ù–¨ 1: {len(level1_result.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)")
                
            # –£–†–û–í–ï–ù–¨ 2: –ë–†–£–¢–§–û–†–° –ê–ù–ê–õ–ò–ó
            logger.info("üî• –£–†–û–í–ï–ù–¨ 2: –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞–Ω–∞–ª–∏–∑")
            level2_result = self.level2_processor.process_complex_file(file_path, file_name)
            result['all_attempts']['level2'] = level2_result
            
            if level2_result['success'] and len(level2_result['products']) > 0:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ä–æ–≤–Ω—è 1 –∏ 2
                level1_count = len(level1_result.get('products', []))
                level2_count = len(level2_result['products'])
                
                if level2_count > level1_count:
                    # –£—Ä–æ–≤–µ–Ω—å 2 –ª—É—á—à–µ
                    result['success'] = True
                    result['final_method'] = 'level2_bruteforce'
                    result['products'] = level2_result['products']
                    result['cascade_log'].append(f"‚úÖ –£–†–û–í–ï–ù–¨ 2 –õ–£–ß–®–ï: {level2_count} —Ç–æ–≤–∞—Ä–æ–≤ (vs {level1_count})")
                    logger.info(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å 2 –ª—É—á—à–µ: {level2_count} vs {level1_count} —Ç–æ–≤–∞—Ä–æ–≤")
                    return result
                elif level1_count > 0:
                    # –£—Ä–æ–≤–µ–Ω—å 1 –≤—Å–µ –∂–µ –ª—É—á—à–µ
                    result['success'] = True  
                    result['final_method'] = 'level1_smart'
                    result['products'] = level1_result['products']
                    result['cascade_log'].append(f"‚úÖ –£–†–û–í–ï–ù–¨ 1 –õ–£–ß–®–ï: {level1_count} —Ç–æ–≤–∞—Ä–æ–≤ (vs {level2_count})")
                    return result
            else:
                result['cascade_log'].append(f"‚ö†Ô∏è –£–†–û–í–ï–ù–¨ 2: {len(level2_result.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤")
                
            # –£–†–û–í–ï–ù–¨ 3: –ü–û–õ–ù–´–ô LLM –ê–ù–ê–õ–ò–ó (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            logger.info("üî• –£–†–û–í–ï–ù–¨ 3: –ü–æ–ª–Ω—ã–π LLM –∞–Ω–∞–ª–∏–∑")
            result['cascade_log'].append("‚è≥ –£–†–û–í–ï–ù–¨ 3: –¢—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –±–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —É—Ä–æ–≤–Ω–µ–π 1-2
            best_result = self._select_best_overall_result(level1_result, level2_result)
            if best_result:
                result['success'] = True
                result['final_method'] = best_result['method']
                result['products'] = best_result['products']
                result['cascade_log'].append(f"‚úÖ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {best_result['method']} - {len(best_result['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                result['cascade_log'].append("‚ùå –í–°–ï –£–†–û–í–ù–ò –ù–ï–£–°–ü–ï–®–ù–´")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            result['cascade_log'].append(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            
        return result
    
    def _read_file_safely(self, file_path: str) -> Optional[pd.DataFrame]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            file_ext = os.path.splitext(file_path)[1].lower()
            
            if file_ext == '.csv':
                # –î–ª—è CSV –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                for encoding in ['utf-8', 'cp1251', 'latin1']:
                    try:
                        return pd.read_csv(file_path, encoding=encoding, dtype=str)
                    except:
                        continue
                        
            elif file_ext in ['.xlsx', '.xls']:
                # –î–ª—è Excel –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–≤–∏–∂–∫–∏
                if file_ext == '.xls':
                    try:
                        return pd.read_excel(file_path, header=None, dtype=str, engine='xlrd')
                    except:
                        try:
                            return pd.read_excel(file_path, header=None, dtype=str, engine='openpyxl')
                        except:
                            return pd.read_excel(file_path, header=None, dtype=str)
                else:
                    return pd.read_excel(file_path, header=None, dtype=str)
                    
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    def _select_best_overall_result(self, level1_result: Dict, level2_result: Dict) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π"""
        candidates = []
        
        if level1_result.get('success') and level1_result.get('products'):
            candidates.append({
                'method': 'level1_smart',
                'products': level1_result['products'],
                'count': len(level1_result['products'])
            })
            
        if level2_result.get('success') and level2_result.get('products'):
            candidates.append({
                'method': 'level2_bruteforce', 
                'products': level2_result['products'],
                'count': len(level2_result['products'])
            })
        
        if not candidates:
            return None
            
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        best = max(candidates, key=lambda x: x['count'])
        return best
        
    def get_cascade_summary(self, result: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –∫–∞—Å–∫–∞–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        if not result:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            
        summary = []
        summary.append(f"üéØ –ö–ê–°–ö–ê–î–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
        summary.append(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: {result.get('final_method', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        summary.append(f"–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('products', []))}")
        summary.append(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–ï–•' if result['success'] else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        summary.append("")
        
        summary.append("–õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for log_entry in result.get('cascade_log', []):
            summary.append(f"  {log_entry}")
            
        return "\n".join(summary) 